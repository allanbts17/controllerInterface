private void fillCalendar(){
		count=0;
		int overlapedDayCount=overlapedDays-1;

		JLabel otherDay;
		JLabel dayBtn;
		JLabel multiBtn;
		JLabel overlapedCalendarDayLabel;	
		JLabel calendarDayLabel;
		JPanel dayPane;
		for(int row=0;row<5;row++) {
			for(int column=0;column<7;column++) {
				otherDay = (JLabel) calendarDays.get(count).getComponents()[4];
				dayBtn = (JLabel) calendarDays.get(count).getComponents()[3];
				multiBtn = (JLabel) calendarDays.get(count).getComponents()[2];
				overlapedCalendarDayLabel = (JLabel) calendarDays.get(count).getComponents()[1];	
				calendarDayLabel = (JLabel) calendarDays.get(count).getComponents()[0];
				dayPane = calendarDays.get(count);
				
				//
				dayBtn.setVisible(true);
				calendarDayLabel.setVisible(true);
				overlapedCalendarDayLabel.setVisible(false);
				multiBtn.setVisible(false);
				otherDay.setVisible(false);
				
				//To define if write the actual month days or last/next month days
				if(row==0 && column == startingWeekDay-1) startToWriteDay = true; 
				else if (dayCount > numberOfDays) startToWriteDay = false;
				
				//Reseting the overlaped calendar day label
				if(row==4) overlapedCalendarDayLabel.setText("");
					
				if(startToWriteDay) {
					if(overlapedDays > 0 && row == 4 && column < overlapedDays) {
						//Switch to see multibtn
						dayBtn.setVisible(false);
						multiBtn.setVisible(true);
						calendarDayLabel.setVisible(true);
						overlapedCalendarDayLabel.setVisible(true);
						otherDay.setVisible(false);
						overlapedCalendarDayLabel.setForeground(Color.BLACK);
						overlapedCalendarDayLabel.setText(Integer.toString(numberOfDays-overlapedDayCount));					
						
						//multiBtn.setIcon(calendarDoubleDayUnpressedIco);
						multiBtn.addMouseListener(new MouseAdapter() {
							boolean up;
							@Override
							public void mouseClicked(MouseEvent e) {
								if(up) {
									
									JLabel calendarDayLabel = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[0];
									System.out.println(calendarDayLabel.getText()+" de "+selectedMonth+" de "+selectedYear);
								}
								else {
									JLabel overlapedCalendarDayLabel = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[1];
									System.out.println(overlapedCalendarDayLabel.getText()+" de "+selectedMonth+" de "+selectedYear);
								}
							}
							@Override
							public void mousePressed(MouseEvent e) {
								float x = e.getX();
								float y = e.getY();
								float yLimit = -((float)calendarDayHeight/(float)calendarDayWidth)*(x-(float)calendarDayWidth);
								JLabel multiBtn = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[2];
								if(y < yLimit) {
									up=true;
									multiBtn.setIcon(calendarUpDaySelectedIco);
								}
								else {
									up=false;
									multiBtn.setIcon(calendarDownDaySelectedIco);
								}
							}
							@Override
							public void mouseReleased(MouseEvent e) {
								JLabel multiBtn =  (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[2];
								multiBtn.setIcon(calendarDoubleDayUnpressedIco);
							}
						});
						calendarDayLabel.setText(Integer.toString(dayCount));
						calendarDayLabel.setForeground(Color.BLACK);
						overlapedDayCount--;
					}
					else {
						Color dayColor;
						dayBtn.setVisible(true);
						multiBtn.setVisible(false);
						calendarDayLabel.setVisible(true);
						overlapedCalendarDayLabel.setVisible(false);
						otherDay.setVisible(false);
						//dayBtn.setIcon(calendarDayUnpressedIco);
						calendarDayLabel.setText(Integer.toString(dayCount));
						if(isToday(dayCount))
							dayColor = Color.RED;
						else
							dayColor = Color.BLACK;
						calendarDayLabel.setForeground(dayColor);
						
						dayBtn.addMouseListener(new MouseAdapter() {
							@Override
							public void mouseClicked(MouseEvent e) {
								JLabel calendarDayLabel = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[0];
								System.out.println(calendarDayLabel.getText()+" de "+selectedMonth+" de "+selectedYear);
							}
							@Override
							public void mousePressed(MouseEvent e) {
								JLabel dayBtn = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[3];
								dayBtn.setIcon(calendarDayPressedIco);
							}
							@Override
							public void mouseReleased(MouseEvent e) {
								JLabel dayBtn = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[3];
								dayBtn.setIcon(calendarDayUnpressedIco);
							}
						});
					}
					dayCount++;
				}
				else {
					otherDay.setVisible(true);
					dayBtn.setVisible(false);
					multiBtn.setVisible(false);
					calendarDayLabel.setVisible(true);
					overlapedCalendarDayLabel.setVisible(false);
					otherDay.setIcon(calendarDayOtherIco);
					dayBtn.addMouseListener(new MouseAdapter() {
						@Override
						public void mouseClicked(MouseEvent e) {
							//System.out.println(calendarDayLabel.getText()+" de "+selectedMonth+" de "+selectedYear);
						}
						@Override
						public void mousePressed(MouseEvent e) {
							JLabel dayBtn = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[4];
							dayBtn.setIcon(calendarDayOtherIco);
						}
						@Override
						public void mouseReleased(MouseEvent e) {
							JLabel dayBtn = (JLabel) ((JLabel) (e.getSource())).getParent().getComponents()[4];
							dayBtn.setIcon(calendarDayOtherIco);
						}
					});
					calendarDayLabel.setText(Integer.toString(otherMonthDays[otherMonthDayCount]));
					calendarDayLabel.setForeground(new Color(0,0,0,120));
					otherMonthDayCount++;
				}	
				count++;			
			}
		}
	}